Given a string s, find the length of the longest 
substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

-------------------------

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> map; // To store the last position of each character
        int left = 0;                 // Start of the sliding window
        int maxLength = 0;            // Maximum length of substring without repeating characters

        for (int right = 0; right < s.length(); right++) {
            char currentChar = s[right];

            // If the character is already in the map and its last occurrence is within the window
            
            if (map.find(currentChar) != map.end() && map[currentChar] >= left) {
                left = map[currentChar] + 1; // Move the left pointer to just after the last occurrence
            }

            map[currentChar] = right;                     // Update the last occurrence of the current character
            maxLength = max(maxLength, right - left + 1); // Update maxLength
        }

        return maxLength;
    }
};

-------------------------
