Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

----------------------------
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        
        if (n > m) return false;
        
        vector<int> s1Count(26, 0), s2Count(26, 0);        // Count frequency of characters in s1 and the first window of s2
        for (int i = 0; i < n; i++) {
            s1Count[s1[i] - 'a']++;
            s2Count[s2[i] - 'a']++;
        }
        
        // Slide the window over s2
        for (int i = 0; i < m - n; i++) {
            if (s1Count == s2Count) return true;            // Slide the window by removing left char and adding the next one
            s2Count[s2[i] - 'a']--;
            s2Count[s2[i + n] - 'a']++;
        }
  
        return s1Count == s2Count;
    }
};
