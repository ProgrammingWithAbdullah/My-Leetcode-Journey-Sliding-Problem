Given two strings s and t of lengths m and n respectively, return the minimum window substring of s
such that every character in t (including duplicates) is included in the window.
If there is no such substring, return the empty string "". The testcases will be generated such that the answer is unique. 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

--------------------------
#include <unordered_map>
#include <string>
#include <climits>

using namespace std;

class Solution {
public:
    string minWindow(string s, string t) {
        if (t.length() > s.length()) return "";

        unordered_map<char, int> t_count, window_count;
        for (char c : t) t_count[c]++;

        int have = 0, need = t_count.size();
        int left = 0, right = 0, start = 0, min_len = INT_MAX;

        while (right < s.size()) {
            char r = s[right];
            window_count[r]++;

            if (t_count.find(r) != t_count.end() && window_count[r] == t_count[r]) {
                have++;
            }

            while (have == need) {
                if (right - left + 1 < min_len) {
                    start = left;
                    min_len = right - left + 1;
                }

                char l = s[left];
                window_count[l]--;
                if (t_count.find(l) != t_count.end() && window_count[l] < t_count[l]) {
                    have--;
                }
                left++;
            }

            right++;
        }

        return min_len == INT_MAX ? "" : s.substr(start, min_len);
    }
};
